/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiUserSettingsRouteImport } from './routes/api/user-settings'
import { Route as ApiUpdateUserSettingsRouteImport } from './routes/api/update-user-settings'
import { Route as ApiSignupRouteImport } from './routes/api/signup'
import { Route as ApiFplRosterRouteImport } from './routes/api/fpl-roster'
import { Route as ApiFplDashboardRouteImport } from './routes/api/fpl-dashboard'
import { Route as ApiWebhooksFplDeadlineRouteImport } from './routes/api/webhooks/fpl-deadline'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as ApiAlertsFplReadyRouteImport } from './routes/api/alerts/fpl-ready'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUserSettingsRoute = ApiUserSettingsRouteImport.update({
  id: '/api/user-settings',
  path: '/api/user-settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUpdateUserSettingsRoute = ApiUpdateUserSettingsRouteImport.update({
  id: '/api/update-user-settings',
  path: '/api/update-user-settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSignupRoute = ApiSignupRouteImport.update({
  id: '/api/signup',
  path: '/api/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiFplRosterRoute = ApiFplRosterRouteImport.update({
  id: '/api/fpl-roster',
  path: '/api/fpl-roster',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiFplDashboardRoute = ApiFplDashboardRouteImport.update({
  id: '/api/fpl-dashboard',
  path: '/api/fpl-dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiWebhooksFplDeadlineRoute = ApiWebhooksFplDeadlineRouteImport.update({
  id: '/api/webhooks/fpl-deadline',
  path: '/api/webhooks/fpl-deadline',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAlertsFplReadyRoute = ApiAlertsFplReadyRouteImport.update({
  id: '/api/alerts/fpl-ready',
  path: '/api/alerts/fpl-ready',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/fpl-dashboard': typeof ApiFplDashboardRoute
  '/api/fpl-roster': typeof ApiFplRosterRoute
  '/api/signup': typeof ApiSignupRoute
  '/api/update-user-settings': typeof ApiUpdateUserSettingsRoute
  '/api/user-settings': typeof ApiUserSettingsRoute
  '/api/alerts/fpl-ready': typeof ApiAlertsFplReadyRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/webhooks/fpl-deadline': typeof ApiWebhooksFplDeadlineRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/fpl-dashboard': typeof ApiFplDashboardRoute
  '/api/fpl-roster': typeof ApiFplRosterRoute
  '/api/signup': typeof ApiSignupRoute
  '/api/update-user-settings': typeof ApiUpdateUserSettingsRoute
  '/api/user-settings': typeof ApiUserSettingsRoute
  '/api/alerts/fpl-ready': typeof ApiAlertsFplReadyRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/webhooks/fpl-deadline': typeof ApiWebhooksFplDeadlineRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/api/fpl-dashboard': typeof ApiFplDashboardRoute
  '/api/fpl-roster': typeof ApiFplRosterRoute
  '/api/signup': typeof ApiSignupRoute
  '/api/update-user-settings': typeof ApiUpdateUserSettingsRoute
  '/api/user-settings': typeof ApiUserSettingsRoute
  '/api/alerts/fpl-ready': typeof ApiAlertsFplReadyRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/webhooks/fpl-deadline': typeof ApiWebhooksFplDeadlineRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/api/fpl-dashboard'
    | '/api/fpl-roster'
    | '/api/signup'
    | '/api/update-user-settings'
    | '/api/user-settings'
    | '/api/alerts/fpl-ready'
    | '/api/auth/$'
    | '/api/webhooks/fpl-deadline'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/api/fpl-dashboard'
    | '/api/fpl-roster'
    | '/api/signup'
    | '/api/update-user-settings'
    | '/api/user-settings'
    | '/api/alerts/fpl-ready'
    | '/api/auth/$'
    | '/api/webhooks/fpl-deadline'
  id:
    | '__root__'
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/api/fpl-dashboard'
    | '/api/fpl-roster'
    | '/api/signup'
    | '/api/update-user-settings'
    | '/api/user-settings'
    | '/api/alerts/fpl-ready'
    | '/api/auth/$'
    | '/api/webhooks/fpl-deadline'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  ApiFplDashboardRoute: typeof ApiFplDashboardRoute
  ApiFplRosterRoute: typeof ApiFplRosterRoute
  ApiSignupRoute: typeof ApiSignupRoute
  ApiUpdateUserSettingsRoute: typeof ApiUpdateUserSettingsRoute
  ApiUserSettingsRoute: typeof ApiUserSettingsRoute
  ApiAlertsFplReadyRoute: typeof ApiAlertsFplReadyRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiWebhooksFplDeadlineRoute: typeof ApiWebhooksFplDeadlineRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/user-settings': {
      id: '/api/user-settings'
      path: '/api/user-settings'
      fullPath: '/api/user-settings'
      preLoaderRoute: typeof ApiUserSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/update-user-settings': {
      id: '/api/update-user-settings'
      path: '/api/update-user-settings'
      fullPath: '/api/update-user-settings'
      preLoaderRoute: typeof ApiUpdateUserSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/signup': {
      id: '/api/signup'
      path: '/api/signup'
      fullPath: '/api/signup'
      preLoaderRoute: typeof ApiSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/fpl-roster': {
      id: '/api/fpl-roster'
      path: '/api/fpl-roster'
      fullPath: '/api/fpl-roster'
      preLoaderRoute: typeof ApiFplRosterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/fpl-dashboard': {
      id: '/api/fpl-dashboard'
      path: '/api/fpl-dashboard'
      fullPath: '/api/fpl-dashboard'
      preLoaderRoute: typeof ApiFplDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/webhooks/fpl-deadline': {
      id: '/api/webhooks/fpl-deadline'
      path: '/api/webhooks/fpl-deadline'
      fullPath: '/api/webhooks/fpl-deadline'
      preLoaderRoute: typeof ApiWebhooksFplDeadlineRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/alerts/fpl-ready': {
      id: '/api/alerts/fpl-ready'
      path: '/api/alerts/fpl-ready'
      fullPath: '/api/alerts/fpl-ready'
      preLoaderRoute: typeof ApiAlertsFplReadyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  ApiFplDashboardRoute: ApiFplDashboardRoute,
  ApiFplRosterRoute: ApiFplRosterRoute,
  ApiSignupRoute: ApiSignupRoute,
  ApiUpdateUserSettingsRoute: ApiUpdateUserSettingsRoute,
  ApiUserSettingsRoute: ApiUserSettingsRoute,
  ApiAlertsFplReadyRoute: ApiAlertsFplReadyRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiWebhooksFplDeadlineRoute: ApiWebhooksFplDeadlineRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
